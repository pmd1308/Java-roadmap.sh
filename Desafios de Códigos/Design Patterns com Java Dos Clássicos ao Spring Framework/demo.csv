"Como você configura um projeto Spring Boot para usar um banco de dados MongoDB?"|Para configurar um projeto Spring Boot para usar MongoDB, adicione a dependência `spring-boot-starter-data-mongodb` no `pom.xml` e defina a URI de conexão no arquivo `application.properties` ou `application.yml`.
"Qual a diferença entre `@Component`, `@Service`, e `@Repository` em Spring?"|`@Component` é uma anotação genérica para beans. `@Service` é especializada para lógica de serviço e `@Repository` para acesso a dados, oferecendo tratamento de exceções específico.
"Como você pode criar um bean em um arquivo de configuração XML em Spring?"|Crie um arquivo XML de configuração e defina beans usando a tag `<bean>`. Adicione o arquivo de configuração no `ApplicationContext` para que o Spring leia e registre os beans definidos.
"O que é o `@Autowired` e como ele é utilizado em Spring?"|`@Autowired` é uma anotação usada para injetar dependências automaticamente. Pode ser aplicada a campos, métodos e construtores para resolver e injetar beans necessários.
"Qual é a finalidade do `@SpringBootApplication` em uma aplicação Spring Boot?"|A anotação `@SpringBootApplication` é uma combinação de `@Configuration`, `@EnableAutoConfiguration`, e `@ComponentScan`, configurando a aplicação para ser executada com Spring Boot.
"Como você pode implementar um serviço assíncrono em Spring?"|Utilize a anotação `@Async` em métodos de um bean, e certifique-se de que a configuração `@EnableAsync` está ativada na configuração da aplicação para executar métodos de forma assíncrona.
"Qual é o propósito do `application.properties` ou `application.yml` em um projeto Spring Boot?"|Esses arquivos são usados para configurar propriedades da aplicação, como conexão com bancos de dados, configurações de segurança e variáveis de ambiente, definindo comportamentos da aplicação.
"Como você pode testar um controller usando o `MockMvc`?"|Use `MockMvc` para simular requisições HTTP e verificar respostas dos controllers. Configure `MockMvc` no contexto de teste e execute métodos de requisição para verificar status e conteúdo das respostas.
"O que é um `Data Transfer Object (DTO)` e qual é sua finalidade?"|DTO é um padrão usado para transferir dados entre camadas da aplicação, simplificando a troca de informações e separando a lógica de negócios dos detalhes de implementação dos dados.
"Como você pode proteger uma API REST com autenticação baseada em JWT?"|Implemente um filtro JWT que verifica o token em cada requisição. Adicione `JwtUtil` para gerar e validar tokens e configure filtros de segurança para interceptar e autenticar requisições.
"Qual é a diferença entre `@RequestMapping` e `@GetMapping` em um controller Spring?"|`@RequestMapping` é uma anotação genérica para mapeamento de requisições HTTP. `@GetMapping` é uma especialização de `@RequestMapping` para requisições HTTP GET.
"Como você pode criar uma classe de utilitários em Java?"|Crie uma classe com métodos estáticos e um construtor privado. Isso previne a instância da classe e permite que métodos utilitários sejam chamados diretamente sem criar um objeto.
"Qual é o propósito da anotação `@Transactional` em métodos de serviço?"|`@Transactional` garante que todos os métodos anotados sejam executados em uma única transação. Se uma exceção ocorrer, a transação pode ser revertida para manter a integridade dos dados.
"Como você pode definir perfis de ambiente em um projeto Spring Boot?"|Use `application-{profile}.properties` ou `application-{profile}.yml` para configurar diferentes perfis de ambiente. Ative um perfil específico com a propriedade `spring.profiles.active`.
"O que são `Beans` no contexto de Spring Framework?"|Beans são objetos gerenciados pelo contêiner Spring, criados e configurados pelo Spring IoC Container. São componentes reutilizáveis que podem ser injetados em outras partes da aplicação.
"Como você pode configurar um `Spring Security` filter para proteger endpoints?"|Crie uma classe que estenda `OncePerRequestFilter` e sobrescreva o método `doFilterInternal`. Adicione esse filtro à cadeia de filtros de segurança na configuração de segurança.
"O que é o padrão de design `Singleton` e como você o aplica em Spring?"|O padrão `Singleton` garante que uma classe tenha apenas uma instância e fornece um ponto global de acesso a ela. No Spring, `@Component` com escopo padrão já segue o padrão Singleton.
"Como você pode usar a anotação `@Profile` para definir comportamentos específicos para diferentes ambientes?"|`@Profile` permite que você defina beans que só sejam ativados em perfis específicos. Adicione `@Profile("dev")` ou `@Profile("prod")` para carregar beans apenas em ambientes definidos.
"Qual a diferença entre `@RequestParam` e `@PathVariable` em Spring MVC?"|`@RequestParam` é usado para acessar parâmetros de query string, enquanto `@PathVariable` é usado para acessar valores de caminho na URL, como em `{id}` em rotas.
"Como você pode configurar a conexão com o MongoDB em uma aplicação Spring Boot?"|Configure a URI de conexão no `application.properties` com `spring.data.mongodb.uri=mongodb://localhost:27017/databaseName`. Spring Boot gerencia a configuração automática do MongoDB.
"O que é o padrão de design `Factory` e como você pode aplicá-lo em uma aplicação Spring?"|O padrão `Factory` cria objetos sem expor a lógica de criação ao cliente. Em Spring, você pode usar `@Bean` métodos em uma classe de configuração para criar e gerenciar instâncias.
"Como você pode implementar a interface `UserDetailsService` em Spring Security?"|Implemente `UserDetailsService` e sobrescreva `loadUserByUsername` para buscar o usuário no banco de dados e retornar um objeto `UserDetails` que representa as credenciais do usuário.
"Qual é o papel do `BCryptPasswordEncoder` na segurança de uma aplicação Spring?"|`BCryptPasswordEncoder` é usado para hash e verificação de senhas de forma segura. Ele aplica um algoritmo de hashing robusto para proteger as senhas armazenadas na base de dados.
"Como você pode definir e usar `Spring Boot Profiles` para configurar diferentes ambientes?"|Defina perfis no `application.properties` com `spring.profiles.active=dev` e crie arquivos `application-dev.properties` e `application-prod.properties` para ambientes distintos.
"O que são os princípios SOLID em design de software?"|SOLID é um acrônimo para cinco princípios de design: Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation e Dependency Inversion, que ajudam a criar sistemas de software mais flexíveis e mantíveis.
"Como funciona o padrão de design MVC (Model-View-Controller)?"|O padrão MVC separa a aplicação em três componentes: Model (dados e lógica de negócios), View (interface com o usuário) e Controller (processa entradas e atualiza o Model e a View).
"Qual a diferença entre programação orientada a objetos e programação funcional?"|Programação orientada a objetos usa classes e objetos para modelar dados e comportamentos, enquanto programação funcional usa funções e imutabilidade para manipular dados e controlar o fluxo de execução.
"O que é Injeção de Dependência e como ela é aplicada no Spring Framework?"|Injeção de Dependência é um padrão de design onde as dependências dos componentes são fornecidas externamente. No Spring, isso é feito usando anotações como `@Autowired`, `@Inject`, ou através de arquivos de configuração.
"Como a programação assíncrona melhora a performance de uma aplicação Java?"|Programação assíncrona permite que operações de longa duração sejam realizadas em paralelo, melhorando a performance e a capacidade de resposta da aplicação ao evitar bloqueios e sobrecargas.
"Qual é a função do `Spring Boot Starter` em uma aplicação Spring?"|`Spring Boot Starters` são conjuntos de dependências predefinidas que ajudam a configurar uma aplicação com funcionalidades específicas, como `spring-boot-starter-web` para aplicações web.
"Como você pode aplicar o padrão de design `Decorator` em uma aplicação Java?"|O padrão `Decorator` adiciona funcionalidades a um objeto de forma dinâmica. Crie uma interface e uma classe base, depois crie decoradores que implementam a mesma interface e adicionam funcionalidades extras.
"O que é uma `Transaction` e por que é importante em aplicações de banco de dados?"|Uma `Transaction` é um conjunto de operações que devem ser executadas como uma unidade única. Transações garantem que todas as operações sejam concluídas com sucesso ou revertidas em caso de falha.
"Qual a importância do `Spring Security` e como ele protege uma aplicação?"|`Spring Security` fornece autenticação, autorização e proteção contra ataques comuns. Ele configura regras de segurança, filtra requisições e protege endpoints usando mecanismos de segurança robustos.
"Como você pode usar o `JUnit` para testar aplicações Java?"|`JUnit` é um framework de teste para Java. Crie classes de teste com anotações como `@Test` e métodos de asserção para verificar a funcionalidade do código e garantir que ele funcione conforme esperado.
